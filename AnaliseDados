// DESAFIO: Aplicar Programação Funcional para Análise de Dados Simples
// Decidimos coletar dados sobre a idade de nossos usuários.
//
// Neste desafio, você será apresentado a esses dados parcialmente defeituosos da idade do usuário,
// que se baseiam em quatro arquivos de entrada:
//
// Alguns dados defeituosos com a idade de nossos usuários
//
//  val data = mapOf (
//    "users1.csv" para listOf (32, 45, 17, -1, 34),
//    "users2.csv" para listOf (19, -1, 67, 22),
//    "users3.csv" para listOf (15, -124, 0, 12),
//    "users4.csv" para listOf (56, 32, 18, 44) )
//
//
// Aplique as funções que você aprendeu, bem como outras funções da biblioteca padrão do Kotlin para
// resolver as seguintes tarefas de análise de dados:
//
// Encontre a idade média dos usuários (use apenas idades válidas para o cálculo!)
// Extraia os nomes dos arquivos de entrada que contêm dados defeituosos
// Conte o número total de entradas com defeito em todos os arquivos de entrada

package br.com.wcc.analisededados

fun main(args: Array<String>) {
    val data = mapOf(
            "users1.csv" to listOf(32, 45, 17, -1, 34),
            "users2.csv" to listOf(19,-1, 67, 22),
            "users3.csv" to listOf(15, -124, 0, 12),
            "users4.csv" to listOf(56, 32, 18, 44)
    )

    // Lógica: para encontrar a idade média desconsiderando os valores inválidos menores que 0, foi preciso
    // utilizar o flatMap, pois, nós querem analisar cada elemento das listas separadamente. Depois o
    // filter fez a filtragem para encontrar os valores maiores que 0 e o .average() fez a média desses
    // valores, resultando assim no valor médio de todos os elementos válidos das listas (idade média dos usuários)

    val idadeMedia =  data.flatMap { it.value }
            .filter { it > 0}
            .average()

    // Lógica: utilizou o filter para encontrar as listas com valor menor que 0 e o map para retirar
    // essas listas
    val dadosIncompletos = data.filter { it.value.any{ it < 0} }
            .map { it.key }

    // Lógica: utilizou o flatMap para analisar os elementos das listas, para filtrar as entradas com
    // dados defeituosos usou o filter, procurando por valores menores que 0 e usou o count() para
    // retornar quantos arquivos possuem valores menores que 0
    val qteDadosIncompletos = data.flatMap { it.value }
            .filter { it < 0 }
            .count()


    println("A idade média é: $idadeMedia anos")

    println("Os arquivos que contêm dados defeituosos são: $dadosIncompletos")

    println("$qteDadosIncompletos arquivos de entrada estão com dados defeituosos" )
}